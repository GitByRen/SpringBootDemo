1.application.properties和application.yml都是全局的配置文件
①配置文件的作用：修改SpringBoot自动配置的默认值
②yaml基本语法
	1)k:(空格)v：表示一对键值(空格必须有)
	2)以空格的缩进来控制层级关系，只要是左对齐的一列数据，都是同一层级的
	3)大小写敏感，不能用Tab键
	4)字符串不用加引号，""和''不一样.(""不会转义特殊字符，字符会作为本身想表示的意思；''会转义，特殊字符最终只是一个普通的字符串数据)
	5)对象的写法(Map)：
		friends:
			lastName: zhangsan
			age: 20
		行内写法：friends: {lastName: zhangsan,age: 18}
	6)数组的写法(List、set)：(用- 值表示数组中的一个元素)
		pets:
			- cat
			- dog
		行内写法：pets: [cat,dog]
	******************************
		person:
		  lastName: zhangsan
		  age: 20
		  boss: false
		  birth: 2017/1/1
		  maps: {k1: v1,k2: v2}
		  lists: 
		    - lisi
		    - zhaowliu
		  dog: 
		    name: 小狗
		    age: 5
2.${person.hello:hello} 占位符：获取不到值就用冒号指定一个值

3.配置文件的名字可以是application-{profile}.properties/yml
①application.properties:先建立application-dev.properties文件，然后在主配置文件配置spring.profiles.active=dev激活profile
②在application.yml中可以定义文档块
server:
  port: 8081
spring:
  profiles:
    active: dev(在没有application-dev.properties的情况下激活下面的dev)
    
下面两个文档块定义端口号和环境
---
server:
  port: 8083
spring:
  profiles: dev
---
server:
  port: 8084
spring:
  profiles: prod

************也可以用命令行的方式激活指定profile --spring.profiles.active=dev

4.配置文件加载位置(优先级从高到低，高的会覆盖低的相同的部分，剩下的会形成互补)
file:./config/
file:./
classpath:/config/
classpath:/
server.context-path=/boot02 配置项目的访问路径
可以通过命令行的方式spring.config.location=G:/application.properties来改变默认配置

5.用命令行修改默认配置
java -jar ... --server.port=8087 --server.context-path=/..
由jar包外向jar包内进行寻找，优先加载带profile的，再来加载不带profile的

例：外部文件为application-prod.properties，项目中spring.profiles.active=dev，
启动项目后不会加载外部prod文件，而是加载激活的环境，如果外部文件名和激活的环境相同，则加载外部文件

6.@Conditional
@ConditionalOnJava  系统的java版本是否符合要求
@ConditionalOnBean  容器中存在指定的bean
@ConditionalOnClass 系统中有指定的类
@ConditionalOnProperty  系统中指定的属性是否有指定的值
@ConditionalOnResource  类路径下是否存在指定资源
@ConditionalOnWebApplication  当前是web环境


7.日志
①日志门面：JCL，SLF4J
②日志实现：Log4j（有性能问题）、Log4j2、Logback
一般选择SLF4J,Logback（log4j、slf4j、logback出自同一人之手,但是logback是基于slf4j日志门面来写的）
注：日志记录方法的调用，不应该来直接调用日志的实现类，而是调用抽象层里面的方法
③slf4j原理：application->slf4j->logback-core、application->slf4j->slf4j-log4j12.jar->log4j.jar
如果slf4j要与其他日志实现结合起来，中间要加适配器
④统一日志记录，让别的框架和我一起使用slf4j
	1)将系统中的其他日志框架排除
	2)用中间包来替换原有的日志框架
	3)导入slf4j其他的实现
⑤日志级别：trace<debug<info<warn<error
⑥指定文件名和指定目录
logging.file=springboot.log 不指定路径在当前项目下生成，可以指定完整路径
logging.path=/spring/log 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹，使用spring.log作为默认文件
⑦指定日志格式
logging.pattern.console 在控制台输出的日志格式
logging.pattern.file 指定文件中日志输出的格式
⑧自定义输出日志
如果用的是logback，直接把logback.xml复制到resources下即可
如果放的是logback.xml，直接就被日志框架识别了
如果放的是logback-spring.xml，日志框架就不直接加载日志的配置项，由springBoot加载，就可以使用springBoot的高级特性，比如profile功能

8、web开发
①所有/webjars/**请求，都去classpath:/META-INF/resources/webjars/  找资源
②存放静态资源的文件夹
classpath:/META-INF/resources/
classpath:/resources/
clsspath:/public/
classpath:/static/
优先级顺序为：META-INF/resources > resources > static > public
注：classpath为src/main/java下或者src/main/resources下
③Thymeleaf使用&语法
只要我们把HTML页面放在classpath:/templates，thymeleaf就能自动渲染
④th:任意属性  来替换原生属性的值
⑤扩展SpringMVC：编写一个配置类，实现WebMvcConfigurer，这样既保留了所有的自动配置，也能用我们扩展的配置
⑥接管SpringMVC：在配置类中添加@EnableWebMvc即可，这样原有的SpringMVC的自动配置都失效了
⑦国际化：classpath下建立i18n文件夹并加入相关的properties文件，然后在配置文件中设置spring.message.basename=...即可，
这样就能根据浏览器的设置自动变换
原理：框架会根据请求头带来的区域信息获取Locale进行国际化
⑧开发期间模板引擎页面修改以后，要实时生效，1）禁用模板缓存 2）页面修改完后重写编译(idea)
⑨拦截器
springboot2.0以后也会拦截静态资源，所以需要排除掉，要排除静态资源文件夹（static...）下的文件，否则还是不行（/asserts/**）

crud...省略（有需要时回看）

9.错误处理
1）如何定制错误响应页面
	1）有模板引擎的情况下，【将错误页面命名为错误状态码.html放在模板引擎文件夹（templates）里面的error文件夹下】，
	  页面能获取到的信息：timestamp，status，error，exception，message，errors
	2）没有模板引擎的情况下，静态资源文件夹下找错误状态码.html
	3）以上都没有则用SpringBoot默认的
2）如何定制错误的json数据
	1）自定义异常处理 @ControllerAdvice、@ExceptionHandler，但是不能自适应（浏览器客户端返回的都是json）
	2）在1）的基础上转发到/error进行自适应响应效果处理，注意要传入我们自己的错误状态码，否则就不会进入错误页面

10、嵌入式Servlet
①springBoot2.0以后去掉了EmbeddedServletContainerCustomizer
②注册三大组件Servlet、Filter、Listener
由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件
所以注册组件用以下方式：
ServletRegistrationBean
FilterRegistrationBean
ServletListenerRegistrationBean
注意：他们都可以用setLoadOnStartup指定启动顺序
③使用其他的嵌入式容器
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
	<exclusions>
		<exclusion>
			排除tomcat的stater
		</exclusion>
	</exclusions>
</dependency>
<dependency>
	引入jetty的stater
</dependency>
